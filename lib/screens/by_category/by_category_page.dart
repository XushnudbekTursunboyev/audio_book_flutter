import 'package:audio_book_flutter/data/model/book_model.dart';import 'package:audio_book_flutter/data/repository/app_repository_impl.dart';import 'package:audio_book_flutter/domain/repository/app_repository.dart';import 'package:audio_book_flutter/screens/by_category/bloc/by_category_bloc.dart';import 'package:audio_book_flutter/screens/playing/playing_screen.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:shimmer/shimmer.dart';class ByCategoryPage extends StatefulWidget {  final String category;  const ByCategoryPage(this.category, {super.key});  @override  State<ByCategoryPage> createState() => _ByCategoryPageState();}class _ByCategoryPageState extends State<ByCategoryPage> {  final AppRepository _repository = AppRepositoryImpl();  late ByCategoryBloc _categoryBloc;  List<BookData> data = [];  @override  void initState() {    super.initState();    _categoryBloc = ByCategoryBloc()      ..add(GetBooksByCategoryEvent(widget.category));  }  @override  void dispose() {    _categoryBloc.close();    super.dispose();  }  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => _categoryBloc,      child: BlocConsumer<ByCategoryBloc, ByCategoryState>(        listener: (context, state) {          if (state is GetBooksByCategoryState) {            data.addAll(state.books);          }          if (state is BookToPlayState) {            Navigator.push(              context,              PageRouteBuilder(                pageBuilder: (context, animation, secondaryAnimation) => PlayingPage(state.id),                transitionsBuilder: (context, animation, secondaryAnimation, child) {                  const begin = Offset(1.0, 0.0);                  const end = Offset.zero;                  const curve = Curves.ease;                  var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));                  var offsetAnimation = animation.drive(tween);                  return SlideTransition(                    position: offsetAnimation,                    child: child,                  );                },              ),            );          }        },        builder: (context, state) {          return Scaffold(            appBar: AppBar(              title: Text(widget.category),              centerTitle: true,              titleTextStyle: const TextStyle(                color: Color(0xFFF26B6C),                fontSize: 20,                fontFamily: 'Uni Neue',                fontWeight: FontWeight.w700,                height: 0,              ),            ),            body: Scaffold(              body: SafeArea(                child: Padding(                    padding: const EdgeInsets.all(17),                    child: SizedBox(                        child: GridView.builder(                      physics: const BouncingScrollPhysics(),                      itemCount: data.isEmpty ? 3 : data.length,                      gridDelegate:                          const SliverGridDelegateWithFixedCrossAxisCount(                        crossAxisCount: 3,                        crossAxisSpacing: 10,                        mainAxisSpacing: 10,                        childAspectRatio: 0.65,                      ),                      itemBuilder: (context, index) {                        if (data.isEmpty) {                          return Container(                            decoration: BoxDecoration(                              borderRadius: BorderRadius.circular(5),                              boxShadow: const [                                BoxShadow(                                  color: Color(0x3F000000),                                  blurRadius: 4,                                  offset: Offset(4, 4),                                  spreadRadius: 0,                                ),                              ],                            ),                            child: ClipRRect(                              borderRadius: BorderRadius.circular(5),                              child: Shimmer.fromColors(                                baseColor: Colors.grey[300]!,                                highlightColor: Colors.grey[100]!,                                child: Container(                                  color: Colors.grey[200],                                ),                              ),                            ),                          );                        } else {                          return InkWell(                            onTap: () {                              context                                  .read<ByCategoryBloc>()                                  .add(BookToPlayEvent(data[index].id!));                            },                            child: Container(                              decoration: BoxDecoration(                                borderRadius: BorderRadius.circular(5),                                boxShadow: const [                                  BoxShadow(                                    color: Color(0x3F000000),                                    blurRadius: 4,                                    offset: Offset(4, 4),                                    spreadRadius: 0,                                  ),                                ],                              ),                              child: ClipRRect(                                borderRadius: BorderRadius.circular(5),                                child: FutureBuilder<String>(                                  future: _repository                                      .getDownloadURL(data[index].img!),                                  builder: (BuildContext context,                                      AsyncSnapshot<String> snapshot) {                                    if (snapshot.connectionState ==                                        ConnectionState.waiting) {                                      return Center(                                        child: Shimmer.fromColors(                                          baseColor: Colors.grey[300]!,                                          highlightColor: Colors.grey[100]!,                                          child: Container(                                            color: Colors.grey,                                          ),                                        ),                                      );                                    } else if (snapshot.hasError ||                                        !snapshot.hasData) {                                      return const Center(                                          child: Icon(Icons.error));                                    } else {                                      return Image.network(snapshot.data!,                                          fit: BoxFit.cover);                                    }                                  },                                ),                              ),                            ),                          );                        }                      },                    ))),              ),            ),          );        },      ),    );  }}